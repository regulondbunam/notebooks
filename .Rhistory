#' @title Connect to the regulondb web services.
#' @description This function creates a variable that allows the connection
#' to the RegulonDB web services hosted on Graphql, which will work for future queries.
#' This function requires an active Internet connection.
#' @author Pina Acosta Daniel, Valle Mondragon Sergio.
#' @return a connection variable global to web services
#' @examples
#' if (!exists("regulondb_conn")) regulondb_conn <- connect_database()
#' @export
connect_database <- function() {
#We assign the value of url
# Update URL
url <- "https://regulondb.ccg.unam.mx/graphql"
return(url)
}
#' Calculate Gene Intervals
#'
#' This function retrieves gene data, calculates the size of each gene,
#' groups the gene sizes into intervals of 100 base pairs, and counts the
#' number of genes in each interval.
#'
#' @return A dataframe containing intervals and the total number of genes within each interval.
#' @author Emanuel Pacheco Alberto
#' @examples
#' get_calculate_gene_intervals()
#'
get_calculate_gene_intervals <- function() {
# Getting query data
query <- '
{
getAllGenes{
data{
gene{
_id
name
leftEndPosition
rightEndPosition
}
}
}
}
'
# Sending POST request to obtain data
req <- POST(regulondb_conn, body = list(query = query), encode = "json")
stop_for_status(req)
# Extracting response in JSON format
json <- content(req, "text", encoding = "UTF-8")
# Converting JSON to a dataframe in R
df <- fromJSON(json) %>% data.frame()
# Unnesting data to obtain gene name
df <- unnest(df, gene , .drop = TRUE)
# Calculating the size of each gene and creating a new column called 'size'
df <- df %>%
mutate(size = rightEndPosition - leftEndPosition + 1)
# Removing null or NA/Inf values
df <- na.omit(df)
# Grouping gene sizes into intervals of 100 base pairs. Creating a new column called 'interval'
df <- df %>%
mutate(interval = cut(size,
breaks = seq(0, ceiling(max(size)/100)*100, by = 100),
labels = paste(seq(1, ceiling(max(size)/100)*100, by = 100),
seq(100, ceiling(max(size)/100)*100, by = 100), sep = "-")))
# Counting the number of genes in each interval. Creating a dataframe df_count
df_count_interval <- df %>%
count(interval)
# Dataframe with intervals and the total number of genes, with column renaming
df_count_interval <- df_count_interval %>%
rename("Size of Genes" = interval, "Total" = n)
# Returning the table dataframe
return(df_count_interval)
}
#' Get general statistics about genes from RegulonDB
#'
#' This function retrieves general statistics about genes from RegulonDB
#' including total number of genes, types of genes, total number of gene products,
#' types of gene products, genes with known regulation, genes in operons, and
#' types of gene strands.
#'
#' @return A dataframe containing the general statistics about genes
#' @author Emanuel Pacheco Alberto
#' @examples
#' get_gene_general_statistics()
#'
get_gene_general_statistics <- function() {
# Function to remove null values
remove_null <- function(df, column) {
df %>%
filter(!is.na({{column}}))
}
# Function to remove null values and empty lists
remove_null_empty_lists <- function(df, column) {
df %>%
filter(!is.na({{column}}), lengths({{column}}) > 0)
}
# Function to count and group by column
count_and_group <- function(df, column) {
df %>%
group_by({{ column }}) %>%
summarise(Total = n(), .groups = "drop") %>%
rename(Description = {{ column }})
}
# Function to count, group by, and rename null values
count_group_and_rename_null <- function(df, column, description) {
df %>%
group_by({{column}}) %>%
summarise(Total = n(), .groups = "drop") %>%
mutate(Description = if_else(is.na({{column}}), paste0("--- ", description),
paste0("--- ", as.character({{column}})))) %>%
select(Description, Total)
}
# Function to create a dataframe with predefined description
create_predefined_dataframe <- function(description, total) {
data.frame(Description = description, Total = total)
}
# Obtaining data from the query
query <-'
{
getAllGenes{
data{
gene{
_id
name
strand
type
}
products{
_id
type
}
regulation{
regulators{
_id
name
}
operon{
_id
name
arrangement{
transcriptionUnit{
_id
name
}
}
}
}
}
}
}
'
# Sending the POST request to fetch the data
req <- POST(regulondb_conn, body = list(query = query), encode = "json")
stop_for_status(req)
# Extracting the JSON response
json <- content(req, "text", encoding = "UTF-8")
# Converting JSON to a dataframe in R
df <- fromJSON(json) %>% data.frame()
# Unnesting the regulation.regulators column
df_gene <- unnest(df, data.getAllGenes.data.gene, .drop = TRUE)
df_products <- unnest(df, data.getAllGenes.data.products, .drop = TRUE)
df_regulation <- unnest(df, data.getAllGenes.data.regulation, .drop = TRUE)
df_operon <- unnest(df_regulation, operon, .drop = TRUE)
df_tu_gene_regulation <- unnest(df_gene, data.getAllGenes.data.regulation, .drop = TRUE)
df_tu_gene_operon <- unnest(df_tu_gene_regulation, operon, .drop = TRUE)
df_tu_gene_arrangement <- unnest(df_tu_gene_operon, arrangement, .drop = TRUE)
# ------------------------------------------------------------------------------
# Rows 1 to 5
# Create a new dataframe for total number of genes, statement, and response
df_table_gene <- create_predefined_dataframe("Total of genes in the chromosome",
nrow(df_gene))
# Add announcement for gene types
df_table_gene <- rbind(df_table_gene, c("Type of genes:", ""))
# Group by "type" column and count to get gene types, also, null grouping
df_type_gene <- count_group_and_rename_null(df_gene, type, "genes")
# ------------------------------------------------------------------------------
# Rows 6 to 12
# Create a new dataframe for total number of gene products
df_table_products <- create_predefined_dataframe("Total of genes products",
nrow(df_products))
# Add announcement for types of gene products
df_table_products <- rbind(df_table_products, c("Type of genes products:", ""))
# Group by "type" column and count to get types of gene products, also, null grouping
df_type_products <- count_group_and_rename_null(df_products, type, "polypeptides")
# ------------------------------------------------------------------------------
# Row 13
# Filter out NULL or empty lists in regulators and create a new dataframe
df_regulation_regulators <- remove_null_empty_lists(df_regulation, regulators)
# Create a new dataframe for genes with known regulation
df_gene_regulation <- create_predefined_dataframe("Genes with known regulation",
nrow(df_regulation_regulators))
# ------------------------------------------------------------------------------
# Row 14
# Remove null values in operons by the name column
df_operon_name <- remove_null(df_operon, name)
# Create a new dataframe for genes in operons
df_gene_operon <- create_predefined_dataframe("Genes in operons",
nrow(df_operon_name))
# ------------------------------------------------------------------------------
# Row 15 Genes in Transcription Unit
# Remove null values in TUs by the name column
df_tu_name <- remove_null(df_tu_gene_arrangement, transcriptionUnit$name)
# Group by "gene$name" column and count
df_gene_tu <- count_and_group(df_tu_name, name)
# Create a new dataframe for total number of genes, statement, and response
df_table_tu <- create_predefined_dataframe("Genes in transcription unit",
nrow(df_gene_tu))
# ------------------------------------------------------------------------------
# Rows 16 and 17
# Remove null values in genes by the strand column
df_gene_strand <- remove_null(df_gene, strand)
# Group by "strand" column and count of the types in strand
df_type_strand <- count_and_group(df_gene_strand, strand)
#Renaming the categories in the "Description" column based on certain conditions
df_type_strand <- df_type_strand %>%
mutate(Description = case_when(
Description == "forward" ~ "Genes in forward strand",
Description == "reverse" ~ "Genes in reverse strand",
TRUE ~ as.character(Description)
))
# ------------------------------------------------------------------------------
# Dataframe with the result of the combination of final dataframes
df_result <- rbind(df_table_gene, df_type_gene, df_table_products,
df_type_products, df_gene_regulation,df_gene_operon,
df_table_tu, df_type_strand)
return(df_result)
}
#' Get Transcription Factors (TFs) Regulations and Associated Genes
#'
#' This function retrieves data on transcription factors (TFs) regulations and
#' their associated genes from a database using a given query.
#'
#' @return A dataframe containing information about TFs, their regulations,
#' and associated genes.
#' @author Emanuel Pacheco Alberto
#' @examples
#' get_tfs_regulations_genes()
#'
get_tfs_regulations_genes <- function(){
# Obtaining data from the query
query <-'
{
getAllGenes
{
data{
gene{
_id
name
}
regulation{
statistics{
regulators
}
}
}
}
}
'
regulondb_conn
# Sending the POST request to fetch the data
req <- POST(regulondb_conn, body = list(query = query), encode = "json")
stop_for_status(req)
# Extracting the JSON response
json <- content(req, "text", encoding = "UTF-8")
# Converting JSON to a dataframe in R
df <- fromJSON(json) %>% data.frame() # Result: 4746
# Unnesting the regulation.regulators column
df_gene <- unnest(df, data.getAllGenes.data.gene, .drop = TRUE)
df_regulation <- unnest(df_gene, data.getAllGenes.data.regulation, .drop = TRUE)
df_statistics <- unnest(df_regulation, statistics, .drop = TRUE) # Result: 4746
# Removing NULL values and 0s
df_statistics_clean <- df_statistics %>%
filter(!is.na(regulators) & regulators != 0) # Result: 4,497 NULL - 1,741 0s = 2,756
#Note: A maximum of 24 TFs regulate a gene at the moment.
# Creating a new table with the name of the regulator, count and names of associated genes
df_count_regulators <- df_statistics_clean %>%
group_by(regulators) %>%
summarise(count_regulators = n())
# Convert the column "Total of tFs that regulate the gene" to string type
df_count_regulators$regulators <- as.character(df_count_regulators$regulators)
# Renaming the column headers and reordering columns
df_count_regulators <- df_count_regulators %>%
rename(`Total of TFs that regulate the gene` = regulators,
`Total of Genes` = count_regulators) %>%
select(`Total of Genes`, `Total of TFs that regulate the gene`)
# Convert the column "Total of tFs that regulate the gene" to a factor with the desired order.
df_count_regulators$`Total of TFs that regulate the gene` <-
factor(df_count_regulators$`Total of TFs that regulate the gene`,
levels = unique(df_count_regulators$`Total of TFs that regulate the gene`))
# Returning the table dataframe
return(df_count_regulators)
}
#' Define function to export DataFrame to a tab-delimited text file
#'
#' This function exports a DataFrame to a text file with tab-delimited values.
#' It takes two arguments: `df`, which is the DataFrame to be exported, and `name`,
#' which is the name used to save the file.
#'
#' @param df The DataFrame to be exported.
#' @param name The name used to save the file.
#' @return Nothing (the function writes the text file)
#' @author Emanuel Pacheco Alberto
#' @examples
#' capture_table_data(my_dataframe, "output_data")
#'
capture_table_data <- function(df, name) {
# Define the directory where the file will be saved
directory <- "datas/"
# Construct the file path by concatenating directory, name, and ".csv" extension
file_path <- paste0(directory, name, ".txt")
# Write the DataFrame to a tab-delimited text file at the specified path
write.table(df, file = file_path, sep = "\t", row.names = FALSE)
}
#' Capture and save a PNG image of a DataTable
#'
#' This function captures and saves a PNG image of a DataTable generated from a dataframe.
#' It calculates the height of the table based on the number of rows and adds additional
#' height for the header. The resulting image is saved in the "images" directory with the
#' specified name.
#'
#' @param df The DataFrame
#' @param name The name used to save the file.
#' @return Nothing (the function saves the PNG image)
#' @author Emanuel Pacheco Alberto
#' @examples
#' capture_table_png(get_gene_general_statistics(), "gene_statistics")
#'
capture_table_png <- function(df, name) {
# Get the number of rows in the dataframe
num_rows <- nrow(df)
# Calculate the total height of the table including header and additional padding
total_height <- num_rows * 34.4 + 39.2 + 45
# Round the total height
vheight <- round(total_height)
# Create the file name for HTML and PNG
file_name <- paste0("images/", name)
# Create the DataTable
dt <- datatable(df, rownames = FALSE,
options = list(dom = 't', ordering = FALSE,
lengthMenu = list(c(-1))))
# Save the DataTable as an HTML file
htmltools::save_html(dt, file = paste0(file_name, ".html"))
# Capture an image of the HTML table and save it as a PNG file
webshot2::webshot(url = paste0(file_name, ".html"),
file = paste0(file_name, ".png"), delay = 4,
cliprect = "viewport", vwidth = 992, vheight = vheight)
}
# To obtain the list of .r files in the "R" folder
archivos <- list.files("R", pattern = "\\.R$", full.names = TRUE)
# To load the functions from each file
lapply(archivos, source)
# To obtain the list of .png files in the "images" folder
images <- list.files("images", pattern = "\\.png$", full.names = TRUE)
# To obtain the list of .csv files in the "datas" folder
datas <- list.files("datas", pattern = "\\.csv$", full.names = TRUE)
#Librerias a utilizar
library(tidyverse)
library(ghql)
library(jsonlite)
library(dplyr)
library(httr)
library(tidyr)
library(ggplot2)
library(DT)
library(knitr)
library(htmltools)
library(htmlwidgets)
library(rmarkdown)
library(webshot2)
# To obtain the list of .r files in the "R" folder
archivos <- list.files("R", pattern = "\\.R$", full.names = TRUE)
# To load the functions from each file
lapply(archivos, source)
# To obtain the list of .png files in the "images" folder
images <- list.files("images", pattern = "\\.png$", full.names = TRUE)
# To obtain the list of .csv files in the "datas" folder
datas <- list.files("datas", pattern = "\\.csv$", full.names = TRUE)
regulondb_conn <- connect_database()
get_gene_general_statistics <- get_gene_general_statistics()
capture_table_data(get_gene_general_statistics, "get_gene_general_statistics")
capture_table_png(get_gene_general_statistics,"get_gene_general_statistics")
get_calculate_gene_intervals <- get_calculate_gene_intervals()
capture_table_data(get_calculate_gene_intervals, "get_calculate_gene_intervals")
capture_table_png(get_calculate_gene_intervals, "get_calculate_gene_intervals")
get_tfs_regulations_genes <- get_tfs_regulations_genes()
capture_table_data(get_tfs_regulations_genes,"get_tfs_regulations_genes")
capture_table_png(get_tfs_regulations_genes,"get_tfs_regulations_genes")
